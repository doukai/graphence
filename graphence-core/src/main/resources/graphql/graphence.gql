type User implements NamedStruct {
    id: ID @dataType(type: "Int" autoIncrement: true)
    name: String!
    description: String
    lastName: String
    login: String!
    salt: String
    hash: String
    email: String
    phones: [String] @map(from: "id" with: {type: "UserPhones" from: "userId" to: "phone"})
    disable: Boolean
    groups: [Group] @map(from: "id" with: {type: "UserGroup" from: "userId" to: "groupId"} to: "id")
    roles: [Role] @map(from: "id" with: {type: "UserRole" from: "userId" to: "roleId"} to: "id")
    realm: Realm @map(from: "realmId" to: "id" anchor: true)
}

type Role implements NamedStruct {
    id: ID @dataType(type: "Int" autoIncrement: true)
    name: String!
    description: String
    users: [User] @map(from: "id" with: {type: "UserRole" from: "roleId" to: "userId"} to: "id")
    groups: [Group] @map(from: "id" with: {type: "GroupRole" from: "roleId" to: "groupId"} to: "id")
    composites: [Role] @map(from: "id" with: {type: "RoleComposite" from: "roleId" to: "compositeId"} to: "id")
    permissions: [Permission] @map(from: "id" with: {type: "RolePermission" from: "roleId" to: "permissionName"} to: "name")
    realm: Realm @map(from: "realmId" to: "id" anchor: true)
}

type Group implements NamedStruct & TreeStruct {
    id: ID @dataType(type: "Int" autoIncrement: true)
    name: String!
    description: String
    path: String
    deep: Int
    parentId: String
    parent: Group @map(from: "parentId" to: "id" anchor: true)
    subGroups: [Group] @map(from: "id" to: "parentId")
    users: [User] @map(from: "id" with: {type: "UserGroup" from: "groupId" to: "userId"} to: "id")
    roles: [Role] @map(from: "id" with: {type: "GroupRole" from: "groupId" to: "roleId"} to: "id")
    realm: Realm @map(from: "realmId" to: "id" anchor: true)
}

type Realm implements NamedStruct {
    id: ID @dataType(type: "Int" autoIncrement: true)
    name: String!
    description: String
}

type Permission {
    name: ID!
    description: String
    field: String!
    type: String!
    permissionType: PermissionType!
    roles: [Role] @map(from: "name" with: {type: "RolePermission" from: "permissionName" to: "roleId"} to: "id")
    realm: Realm @map(from: "realmId" to: "id" anchor: true)
}

enum PermissionType {
    READ
    WRITE
}